{"remainingRequest":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js!/home/crax/Code/ZhuHaiBus-PWA/node_modules/eslint-loader/index.js??ref--13-0!/home/crax/Code/ZhuHaiBus-PWA/src/script/RequestMudule.js","dependencies":[{"path":"/home/crax/Code/ZhuHaiBus-PWA/src/script/RequestMudule.js","mtime":1547006335917},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1546870092283},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js","mtime":1546870092233},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/eslint-loader/index.js","mtime":1546870092613}],"contextDependencies":[],"result":["import _objectSpread from \"/home/crax/Code/ZhuHaiBus-PWA/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.map\";\nimport _Promise from \"/home/crax/Code/ZhuHaiBus-PWA/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nvar prefix = 'https://api.clive.site';\naxios.defaults.baseURL = prefix;\naxios.defaults.timeout = 1000; //在main.js设置全局的请求次数，请求的间隙\n\naxios.defaults.retry = 4;\naxios.interceptors.response.use(function (response) {\n  return response.data;\n}, function (err) {\n  //错误重试\n  var config = err.config; // If config does not exist or the retry option is not set, reject\n\n  if (!config || !config.retry) return _Promise.reject(err); // Set the variable for keeping track of the retry count\n\n  config.__retryCount = config.__retryCount || 0; // Check if we've maxed out the total number of retries\n\n  if (config.__retryCount >= config.retry) {\n    // Reject with the error\n    return _Promise.reject(err);\n  } // Increase the retry count\n\n\n  config.__retryCount += 1; // Return the promise in which recalls axios to retry the request\n\n  return axios(config);\n}); //axios.interceptors.response.use(response => response.data);\n\nfunction _RequestData(urlPath) {\n  return axios.get(urlPath);\n}\n\nfunction getStationsList(_ref) {\n  var id = _ref.id;\n  return _RequestData(\"\".concat(prefix, \"/stations/\").concat(id)).then(function (response) {\n    return response.map(function (station) {\n      return _objectSpread({}, station, {\n        driveInBusNumber: [],\n        driveOutBusNumber: []\n      });\n    });\n  });\n}\n\nfunction getRealTimeData(_ref2) {\n  var id = _ref2.id,\n      lineNumber = _ref2.lineNumber,\n      originStation = _ref2.originStation;\n  return _RequestData(\"\".concat(prefix, \"/realtime/\").concat(id, \"&\").concat(encodeURI(lineNumber), \"&\").concat(encodeURI(originStation)));\n}\n\nfunction getLineDetails(_ref3) {\n  var id = _ref3.id,\n      lineNumber = _ref3.lineNumber;\n  return _RequestData(\"\".concat(prefix, \"/details/\").concat(id, \"&\").concat(encodeURI(lineNumber)));\n}\n\nexport default {\n  getStationsList: getStationsList,\n  getRealTimeData: getRealTimeData,\n  getLineDetails: getLineDetails\n};",{"version":3,"sources":["/home/crax/Code/ZhuHaiBus-PWA/src/script/RequestMudule.js"],"names":["axios","prefix","defaults","baseURL","timeout","retry","interceptors","response","use","data","err","config","reject","__retryCount","_RequestData","urlPath","get","getStationsList","id","then","map","station","driveInBusNumber","driveOutBusNumber","getRealTimeData","lineNumber","originStation","encodeURI","getLineDetails"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,MAAM,GAAG,wBAAf;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyBF,MAAzB;AACAD,KAAK,CAACE,QAAN,CAAeE,OAAf,GAAyB,IAAzB,C,CACA;;AACAJ,KAAK,CAACE,QAAN,CAAeG,KAAf,GAAuB,CAAvB;AAEAL,KAAK,CAACM,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,UAAAD,QAAQ;AAAA,SAAIA,QAAQ,CAACE,IAAb;AAAA,CAAxC,EAA2D,UAAAC,GAAG,EAAI;AAChE;AACE,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAjB,CAF8D,CAG9D;;AACA,MAAG,CAACA,MAAD,IAAW,CAACA,MAAM,CAACN,KAAtB,EAA6B,OAAO,SAAQO,MAAR,CAAeF,GAAf,CAAP,CAJiC,CAM9D;;AACAC,EAAAA,MAAM,CAACE,YAAP,GAAsBF,MAAM,CAACE,YAAP,IAAuB,CAA7C,CAP8D,CAS9D;;AACA,MAAGF,MAAM,CAACE,YAAP,IAAuBF,MAAM,CAACN,KAAjC,EAAwC;AACpC;AACA,WAAO,SAAQO,MAAR,CAAeF,GAAf,CAAP;AACH,GAb6D,CAe9D;;;AACAC,EAAAA,MAAM,CAACE,YAAP,IAAuB,CAAvB,CAhB8D,CAkB9D;;AACA,SAAOb,KAAK,CAACW,MAAD,CAAZ;AACH,CApBD,E,CAyBA;;AAEA,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAOf,KAAK,CAACgB,GAAN,CAAUD,OAAV,CAAP;AACD;;AACD,SAASE,eAAT,OAAiC;AAAA,MAANC,EAAM,QAANA,EAAM;AAC/B,SAAOJ,YAAY,WAAIb,MAAJ,uBAAuBiB,EAAvB,EAAZ,CAAyCC,IAAzC,CAA8C,UAAAZ,QAAQ;AAAA,WAAIA,QAAQ,CAACa,GAAT,CAAa,UAAAC,OAAO;AAAA,+BAChFA,OADgF;AAEnFC,QAAAA,gBAAgB,EAAE,EAFiE;AAGnFC,QAAAA,iBAAiB,EAAE;AAHgE;AAAA,KAApB,CAAJ;AAAA,GAAtD,CAAP;AAKD;;AAED,SAASC,eAAT,QAA4D;AAAA,MAAjCN,EAAiC,SAAjCA,EAAiC;AAAA,MAA7BO,UAA6B,SAA7BA,UAA6B;AAAA,MAAjBC,aAAiB,SAAjBA,aAAiB;AAC1D,SAAOZ,YAAY,WACdb,MADc,uBACKiB,EADL,cACWS,SAAS,CAACF,UAAD,CADpB,cACoCE,SAAS,CAACD,aAAD,CAD7C,EAAnB;AAGD;;AACD,SAASE,cAAT,QAA4C;AAAA,MAAlBV,EAAkB,SAAlBA,EAAkB;AAAA,MAAdO,UAAc,SAAdA,UAAc;AAC1C,SAAOX,YAAY,WAAIb,MAAJ,sBAAsBiB,EAAtB,cAA4BS,SAAS,CAACF,UAAD,CAArC,EAAnB;AACD;;AAED,eAAe;AACbR,EAAAA,eAAe,EAAfA,eADa;AAEbO,EAAAA,eAAe,EAAfA,eAFa;AAGbI,EAAAA,cAAc,EAAdA;AAHa,CAAf","sourcesContent":["import axios from 'axios';\nconst prefix = 'https://api.clive.site';\naxios.defaults.baseURL = prefix;\naxios.defaults.timeout = 1000;\n//在main.js设置全局的请求次数，请求的间隙\naxios.defaults.retry = 4;\n\naxios.interceptors.response.use(response => response.data, err => {\n  //错误重试\n    var config = err.config;\n    // If config does not exist or the retry option is not set, reject\n    if(!config || !config.retry) return Promise.reject(err);\n    \n    // Set the variable for keeping track of the retry count\n    config.__retryCount = config.__retryCount || 0;\n    \n    // Check if we've maxed out the total number of retries\n    if(config.__retryCount >= config.retry) {\n        // Reject with the error\n        return Promise.reject(err);\n    }\n    \n    // Increase the retry count\n    config.__retryCount += 1;\n    \n    // Return the promise in which recalls axios to retry the request\n    return axios(config);\n});\n\n\n\n\n//axios.interceptors.response.use(response => response.data);\n\nfunction _RequestData(urlPath) {\n  return axios.get(urlPath);\n}\nfunction getStationsList({ id }) {\n  return _RequestData(`${prefix}/stations/${id}`).then(response => response.map(station => ({\n    ...station,\n    driveInBusNumber: [],\n    driveOutBusNumber: [],\n  })));\n}\n\nfunction getRealTimeData({ id, lineNumber, originStation }) {\n  return _RequestData(\n    `${prefix}/realtime/${id}&${encodeURI(lineNumber)}&${encodeURI(originStation)}`,\n  );\n}\nfunction getLineDetails({ id, lineNumber }) {\n  return _RequestData(`${prefix}/details/${id}&${encodeURI(lineNumber)}`);\n}\n\nexport default {\n  getStationsList,\n  getRealTimeData,\n  getLineDetails,\n};\n"]}]}