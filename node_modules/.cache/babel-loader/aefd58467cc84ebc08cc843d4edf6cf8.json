{"remainingRequest":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/thread-loader/dist/cjs.js!/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js!/home/crax/Code/ZhuHaiBus-PWA/src/store/index.js","dependencies":[{"path":"/home/crax/Code/ZhuHaiBus-PWA/src/store/index.js","mtime":1550826425808},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/thread-loader/dist/cjs.js","mtime":1550211706775},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js","mtime":1550211689805}],"contextDependencies":[],"result":["import _objectDestructuringEmpty from \"/home/crax/Code/ZhuHaiBus-PWA/node_modules/@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nimport _Promise from \"/home/crax/Code/ZhuHaiBus-PWA/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.sort\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"@/router/index\";\nimport { characterMatchRoute, queryAnotherRoute } from \"@/script/utils\";\nimport { requestRealTimeData as _requestRealTimeData } from \"@/script/request\";\nVue.use(Vuex);\nvar REQUEST_OFFEST = 2;\n\nfunction delayTrigger(handle, args, target, complete) {\n  setTimeout(function () {\n    target[handle](args);\n    complete();\n  }, 150);\n}\n\nexport default new Vuex.Store({\n  state: {\n    searchBarStatus: false,\n    screenHeight: null,\n    globalRouters: [],\n    requestTaskPool: []\n  },\n  getters: {\n    calculatePageOffset: function calculatePageOffset(state) {\n      return Math.floor(state.screenHeight / 65.5 * 0.5) * 65.5;\n    }\n  },\n  mutations: {\n    _changeSearchBarStatus: function _changeSearchBarStatus(state) {\n      state.searchBarStatus = !state.searchBarStatus;\n    },\n    setScreenHeight: function setScreenHeight(state, height) {\n      state.screenHeight = height;\n    },\n    addRouters: function addRouters(state, routerInfo) {\n      state.globalRouters.unshift(routerInfo);\n    },\n    stickyRouter: function stickyRouter(state, _ref) {\n      var Id = _ref.Id;\n      state.globalRouters.sort(function (routerInfo) {\n        return routerInfo.Id === Id ? -1 : 0;\n      });\n    },\n    reverseRouter: function reverseRouter(state, _ref2) {\n      var Id = _ref2.Id;\n      var index = state.globalRouters.findIndex(function (route) {\n        return route.Id === Id;\n      });\n      var anotherRouter = queryAnotherRoute(state.globalRouters[index]);\n      if (anotherRouter.length) state.globalRouters.splice(index, 1, anotherRouter[0]);\n    },\n    setGlobalRouters: function setGlobalRouters(state, routers) {\n      state.globalRouters = routers;\n    }\n  },\n  actions: {\n    changeSearchBarState: function changeSearchBarState(context) {\n      return new _Promise(function (resolve, reject) {\n        delayTrigger(\"commit\", \"_changeSearchBarStatus\", context, resolve);\n      });\n    },\n    viewConversion: function viewConversion(_ref3, opts) {\n      var state = _ref3.state,\n          commit = _ref3.commit;\n      return new _Promise(function (resolve, reject) {\n        var handle = opts.handle;\n        var params = opts.params;\n        delayTrigger(handle, params, router, resolve);\n      }).then(function () {\n        return commit(\"stickyRouter\", opts.params.params);\n      });\n    },\n    viewReturn: function viewReturn(_ref4, numberOfEntries) {\n      _objectDestructuringEmpty(_ref4);\n\n      return new _Promise(function (resolve, reject) {\n        return delayTrigger(\"back\", \"\", router, resolve);\n      });\n    },\n    requestRealTimeData: function requestRealTimeData(_ref5, opts) {\n      _objectDestructuringEmpty(_ref5);\n\n      return _requestRealTimeData(opts);\n    }\n    /*updateRealTimeData({ dispatch }, opts) {\n      return dispatch(\"requestRealTimeData\", opts)\n              .then(result => (commit(\"mergaRealtimeToRouterInfo\", {\n                  id: routerInfo.Id,\n                  realtimeData: result.data})))\n              .catch(error => (dispatch.requestRealTimeData(routerInfo)))\n    },*/\n    // 用户的乘车选择大部分情况下不止一辆，所以根据用户的浏览记录前三个车辆进行请求。\n\n    /*updateRealtimeDataByOffectRecentlyViewedRouter({ dispatch, commit, getters }) {\n      getters.offsetRecentlyViewedRoute.forEach(routerInfo => {\n        dispatch(\"updateRealTimeData\", routerInfo)\n      })\n    }*/\n\n  }\n});",{"version":3,"sources":["/home/crax/Code/ZhuHaiBus-PWA/src/store/index.js"],"names":["Vue","Vuex","router","characterMatchRoute","queryAnotherRoute","requestRealTimeData","use","REQUEST_OFFEST","delayTrigger","handle","args","target","complete","setTimeout","Store","state","searchBarStatus","screenHeight","globalRouters","requestTaskPool","getters","calculatePageOffset","Math","floor","mutations","_changeSearchBarStatus","setScreenHeight","height","addRouters","routerInfo","unshift","stickyRouter","Id","sort","reverseRouter","index","findIndex","route","anotherRouter","length","splice","setGlobalRouters","routers","actions","changeSearchBarState","context","resolve","reject","viewConversion","opts","commit","params","then","viewReturn","numberOfEntries"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"@/router/index\";\nimport { characterMatchRoute, queryAnotherRoute } from \"@/script/utils\";\nimport  { requestRealTimeData }  from \"@/script/request\"\nVue.use(Vuex);\nconst REQUEST_OFFEST = 2;\nfunction delayTrigger(handle, args, target, complete) {\n  setTimeout(() => {\n    target[handle](args);\n    complete();\n  }, 150);\n}\nexport default new Vuex.Store({\n  state: {\n    searchBarStatus: false,\n    screenHeight: null,\n    globalRouters: [],\n    requestTaskPool: []\n  },\n  getters: {\n    calculatePageOffset: state => {\n      return Math.floor((state.screenHeight / 65.5) * 0.5) * 65.5;\n    }\n  },\n  mutations: {\n    _changeSearchBarStatus(state) {\n      state.searchBarStatus = !state.searchBarStatus;\n    },\n    setScreenHeight(state, height) {\n      state.screenHeight = height;\n    },\n    addRouters(state, routerInfo) {\n      state.globalRouters.unshift(routerInfo);\n    },\n    stickyRouter(state, { Id }) {\n      state.globalRouters.sort(routerInfo => (routerInfo.Id === Id ? -1 : 0))\n    },\n    reverseRouter(state, { Id }) {\n      let index = state.globalRouters.findIndex(route => route.Id === Id)\n      let anotherRouter = queryAnotherRoute(state.globalRouters[index])\n      if(anotherRouter.length) state.globalRouters.splice(index, 1, anotherRouter[0]);   \n    },\n    setGlobalRouters(state, routers) {\n      state.globalRouters = routers;\n    }\n  },\n  actions: {\n    changeSearchBarState(context) {\n      return new Promise((resolve, reject) => {\n        delayTrigger(\"commit\", \"_changeSearchBarStatus\", context, resolve);\n      });\n    },\n    viewConversion({ state, commit }, opts) {\n      return new Promise((resolve, reject) => {\n        let handle = opts.handle\n        let params = opts.params\n        delayTrigger(handle, params, router, resolve);\n      }).then(() => commit(\"stickyRouter\", opts.params.params));\n    },\n    viewReturn({}, numberOfEntries) {\n      return new Promise((resolve, reject) =>\n        delayTrigger(\"back\", \"\", router, resolve)\n      );\n    },\n    requestRealTimeData({}, opts) {\n      return requestRealTimeData(opts)\n    }\n    /*updateRealTimeData({ dispatch }, opts) {\n      return dispatch(\"requestRealTimeData\", opts)\n              .then(result => (commit(\"mergaRealtimeToRouterInfo\", {\n                  id: routerInfo.Id,\n                  realtimeData: result.data})))\n              .catch(error => (dispatch.requestRealTimeData(routerInfo)))\n    },*/\n    // 用户的乘车选择大部分情况下不止一辆，所以根据用户的浏览记录前三个车辆进行请求。\n    /*updateRealtimeDataByOffectRecentlyViewedRouter({ dispatch, commit, getters }) {\n      getters.offsetRecentlyViewedRoute.forEach(routerInfo => {\n        dispatch(\"updateRealTimeData\", routerInfo)\n      })\n    }*/\n  }\n})\n\n"]}]}