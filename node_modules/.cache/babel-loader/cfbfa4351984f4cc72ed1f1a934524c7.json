{"remainingRequest":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/thread-loader/dist/cjs.js!/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js!/home/crax/Code/ZhuHaiBus-PWA/node_modules/vuetify-loader/lib/loader.js!/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue","mtime":1550377683592},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/thread-loader/dist/cjs.js","mtime":1550211706775},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js","mtime":1550211689805},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vuetify-loader/lib/loader.js","mtime":1550211707105},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js","mtime":1550211706840}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _objectSpread from \"/home/crax/Code/ZhuHaiBus-PWA/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters, mapMutations, mapState } from \"vuex\";\nimport { requestRealTimeData } from \"@/script/request\";\nimport { filterObj } from \"@/script/utils\";\nexport default {\n  data: function data() {\n    return {\n      error_snackbar: false,\n      timeout: 3000,\n      loading: false,\n      requestIcon: \"none\",\n      errorMsg: \"Timeout Retry\",\n      intervalId: \"\",\n      busList: []\n    };\n  },\n  computed: _objectSpread({}, mapState([\"routers\"])),\n  watch: {\n    loading: function loading(val) {\n      var _this = this;\n\n      if (!val) {\n        this.requestIcon = \"done\";\n        setTimeout(function () {\n          return _this.requestIcon = \"none\";\n        }, 1000);\n      }\n    }\n  },\n  methods: _objectSpread({}, mapActions([\"viewReturn\", \"viewConversion\"]), mapMutations([\"updateRealTimeData\", \"reverseRouter\"]), {\n    showError: function showError(e) {\n      this.errorMsg = e;\n      this.error_snackbar = true;\n    },\n    update: function update(params) {\n      var _this2 = this;\n\n      this.loading = true;\n      requestRealTimeData(params).then(function (result) {\n        _this2.loading = false;\n        _this2.busList = result.data;\n      }).catch(function (e) {\n        return _this2.showError(e.status);\n      });\n    },\n    iconShowJudge: function iconShowJudge(name, genre) {\n      var result = this.busList.find(function (info) {\n        return info[\"name\"] === name;\n      });\n\n      if (result != null) {\n        return genre === (result[\"busState\"] ? \"in\" : \"out\");\n      }\n\n      return false;\n    },\n    getBusQuantify: function getBusQuantify(name, logic) {\n      var result = filterObj(\"busState\", logic, filterObj(\"name\", name, this.busList));\n      return result.length;\n    },\n    reverse: function reverse() {\n      var _this3 = this;\n\n      this.reverseRouter(this.$route.params.Id);\n      this.viewConversion({\n        name: \"details\",\n        params: this.routers.flat().find(function (r) {\n          return r[\"Name\"] === _this3.$route.params[\"Name\"] && r[\"Id\"] !== _this3.$route.params[\"Id\"];\n        })\n      });\n    },\n    clear: function clear() {\n      clearInterval(this.intervalId);\n    },\n    startInterval: function startInterval() {\n      this.intervalId = setInterval(function (self) {\n        if (self.$route.params.hasOwnProperty(\"Id\")) self.update(self.$route.params);\n      }, 4000, this);\n    }\n  }),\n  mounted: function mounted() {\n    this.update(this.$route.params);\n    if (!this.intervalId) this.startInterval();\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    this.busList = [];\n    this.update(to.params);\n    next();\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.busList = [];\n    next();\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-fade-transition>\n    <v-app>\n      <v-toolbar fixed>\n        <v-toolbar-side-icon @click=\"viewReturn\">\n          <v-icon>arrow_back</v-icon>\n        </v-toolbar-side-icon>\n        <div>\n          <div class=\"body-2\">{{ $route.params.Name }}({{ busList.length }}辆车正在行驶)</div>\n          <span class=\"body-1\">{{ $route.params.FromStation }}</span>\n          <v-icon small class=\"arrow_forward_icon\">arrow_forward</v-icon>\n          <span class=\"body-1\">{{ $route.params.ToStation }}</span>\n        </div>\n        <v-spacer></v-spacer>\n        <v-btn icon :loading=\"loading\">\n          <v-fade-transition>\n            <v-icon>{{ requestIcon }}</v-icon>\n          </v-fade-transition>\n        </v-btn>\n        <v-btn icon @click=\"reverse\">\n          <v-icon>swap_horiz</v-icon>\n        </v-btn>\n      </v-toolbar>\n      <v-timeline align-top dense class=\"timeline_wrap\">\n        <v-timeline-item fill-dot small v-for=\"(stop, index) in $route.params.stops\" :key=\"index\">\n          <v-layout pt-3>\n            <v-flex xs3>\n              <v-fade-transition>\n                <v-tooltip bottom>\n                  <v-badge\n                    small\n                    right\n                    slot=\"activator\"\n                    v-if=\"busList.length && iconShowJudge(stop.Name, 'in')\"\n                  >\n                    <span slot=\"badge\">{{ getBusQuantify(stop.Name, true) }}</span>\n                    <v-icon>directions_bus</v-icon>\n                  </v-badge>\n                </v-tooltip>\n              </v-fade-transition>\n            </v-flex>\n            <v-fade-transition>\n              <v-flex class=\"driveout_icon_wrapper\">\n                <v-badge small right v-if=\"busList.length && iconShowJudge(stop.Name, 'out')\">\n                  <span slot=\"badge\">{{ getBusQuantify(stop.Name, false) }}</span>\n                  <v-icon>directions_bus</v-icon>\n                </v-badge>\n              </v-flex>\n            </v-fade-transition>\n            <v-flex>\n              <strong>{{ stop.Name }}</strong>\n            </v-flex>\n          </v-layout>\n        </v-timeline-item>\n      </v-timeline>\n      <v-snackbar color=\"error\" :timeout=\"timeout\" v-model=\"error_snackbar\">\n        {{ errorMsg }}\n        <v-btn dark flat @click=\"error_snackbar = false\">Close</v-btn>\n      </v-snackbar>\n    </v-app>\n  </v-fade-transition>\n</template>\n<script>\nimport { mapActions, mapGetters, mapMutations, mapState } from \"vuex\";\nimport { requestRealTimeData } from \"@/script/request\";\nimport { filterObj } from \"@/script/utils\";\nexport default {\n  data: () => ({\n    error_snackbar: false,\n    timeout: 3000,\n    loading: false,\n    requestIcon: \"none\",\n    errorMsg: \"Timeout Retry\",\n    intervalId: \"\",\n    busList: []\n  }),\n  computed: {\n    ...mapState([\"routers\"])\n  },\n  watch: {\n    loading(val) {\n      if (!val) {\n        this.requestIcon = \"done\";\n        setTimeout(() => (this.requestIcon = \"none\"), 1000);\n      }\n    }\n  },\n  methods: {\n    ...mapActions([\"viewReturn\", \"viewConversion\"]),\n    ...mapMutations([\"updateRealTimeData\", \"reverseRouter\"]),\n    showError(e) {\n      this.errorMsg = e;\n      this.error_snackbar = true;\n    },\n    update(params) {\n      this.loading = true;\n      requestRealTimeData(params)\n        .then(result => {\n          this.loading = false;\n          this.busList = result.data;\n        })\n        .catch(e => this.showError(e.status));\n    },\n    iconShowJudge(name, genre) {\n      let result = this.busList.find(info => info[\"name\"] === name);\n      if (result != null) {\n        return genre === (result[\"busState\"] ? \"in\" : \"out\");\n      }\n      return false;\n    },\n    getBusQuantify(name, logic) {\n      let result = filterObj(\n        \"busState\",\n        logic,\n        filterObj(\"name\", name, this.busList)\n      );\n      return result.length;\n    },\n    reverse() {\n      this.reverseRouter(this.$route.params.Id);\n      this.viewConversion({\n        name: \"details\",\n        params: this.routers\n          .flat()\n          .find(\n            r =>\n              r[\"Name\"] === this.$route.params[\"Name\"] &&\n              r[\"Id\"] !== this.$route.params[\"Id\"]\n          )\n      });\n    },\n    clear() {\n      clearInterval(this.intervalId);\n    },\n    startInterval() {\n      this.intervalId = setInterval(\n        self => {\n          if (self.$route.params.hasOwnProperty(\"Id\"))\n            self.update(self.$route.params);\n        },\n        4000,\n        this\n      );\n    }\n  },\n  mounted() {\n    this.update(this.$route.params);\n    if (!this.intervalId) this.startInterval();\n  },\n  beforeRouteUpdate(to, from, next) {\n    this.busList = [];\n    this.update(to.params);\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    this.busList = [];\n    next();\n  }\n};\n</script>\n<style scoped>\n.toolbar_titl {\n  flex-direction: column;\n  justify-content: center;\n}\n.timeline_wrap {\n  margin-top: 55px;\n}\n.toolbar_titl > span {\n  size: 1.5rem;\n}\n.driveout_icon_wrapper {\n  position: absolute;\n  top: 45px;\n}\n</style>"],"sourceRoot":"src/page/details"}]}