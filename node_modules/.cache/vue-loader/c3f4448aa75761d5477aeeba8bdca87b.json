{"remainingRequest":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue","mtime":1550224055674},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js","mtime":1550211689805},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vuetify-loader/lib/loader.js","mtime":1550211707105},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js","mtime":1550211706840}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex'\nimport {requestRealTimeData} from '@/script/request'\nimport { filterObj } from '@/script/utils'\nexport default {\n\tdata: () => ({\n\t\terror_snackbar: false,\n\t\ttimeout: 3000,\n\t\tloading: false,\n\t\trequestIcon: 'none',\n\t\terrorMsg: \"\",\n\t\tintervalId: \"\",\n\t\tbusList: []\n\t}),\n\tcomputed: {\n\t\t...mapState([\"routers\"]),\n\t},\n\twatch: {\n\t\tloading(val) {\n\t\t\tif(!val) {\n\t\t\t\tthis.requestIcon = 'done'\n\t\t\t\tsetTimeout(() => (this.requestIcon = 'none'), 1000)\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n    ...mapActions([\"viewReturn\", \"viewConversion\"]),\n    ...mapMutations([\"updateRealTimeData\", \"reverseRouter\"]),\n   \tshowError(e) {\n   \t\tthis.errorMsg = e\n   \t\tthis.error_snackbar = true\n   \t},\n   \tupdate(params) {\n   \t\tthis.loading = true\n   \t\trequestRealTimeData(params)\n   \t\t.then(result => {\n   \t\t\tthis.loading = false\n   \t\t\tthis.busList = result.data\n   \t\t})\n   \t\t.catch(e => (this.showError(e.status)))\n   \t},\n   \ticonShowJudge(name, genre) {\n   \t\tlet result = this.busList.find(info => (info['name'] === name))\n   \t\tif(result != null) {\n   \t\t\treturn genre === (result[\"busState\"] ? 'in' : 'out')\n   \t\t}\n   \t\treturn false\n\t},\n\tgetBusQuantify(name, logic) {\n\t\tlet result = filterObj('busState', logic, (filterObj('name', name, this.busList)))\n\t\treturn result.length\n\t},\n\treverse() {\n\t\tthis.reverseRouter(this.$route.params.Id)\n\t\tthis.viewConversion({\n\t\t\tname: 'details',\n\t\t\tparams: this.routers.flat().find(r => r[\"Name\"] === this.$route.params[\"Name\"] && r['Id'] !== this.$route.params[\"Id\"])\n\t\t})\n\t},\n\tclear() {\n\t\tclearInterval(this.intervalId)\n\t},\n\tstartInterval() {\n\t\tthis.intervalId = setInterval((self) => {\n\t\t\tif(self.$route.params.hasOwnProperty(\"Id\"))self.update(self.$route.params);\n\t\t}, 4000, this)\n\t}\n\t},\n\tmounted() {\n\t\tthis.update(this.$route.params)\n\t\tif(!this.intervalId)this.startInterval();\n\t},\n\tbeforeRouteUpdate (to, from, next) {\n\t\tthis.busList = []\n\t\tthis.update(to.params)\n\t\tnext()\n  },\n  \tbeforeRouteLeave (to, from, next) {\n  \t\tthis.busList = []\n  \t\tnext()\n  \t}\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/page/details","sourcesContent":["<template>\n<v-fade-transition>\n<v-app>\n\t<v-toolbar fixed>\n\t\t<v-toolbar-side-icon @click=\"viewReturn\">\n\t\t\t<v-icon>arrow_back</v-icon>\n\t\t</v-toolbar-side-icon>\n\t\t\t<div>\n\t\t\t\t<div class=\"body-2\">{{ $route.params.Name }}({{ busList.length }}辆车正在行驶)</div>\n\t\t\t\t\t<span class=\"body-1\">{{ $route.params.FromStation }}</span>\n                \t<v-icon small class=\"arrow_forward_icon\">arrow_forward</v-icon>\n                \t<span class=\"body-1\">{{ $route.params.ToStation }}</span>\t\n\t\t\t</div>\n\t\t\t<v-spacer></v-spacer>\n\t\t\t<v-btn icon :loading=\"loading\" >\n\t\t\t\t<v-fade-transition>\n\t\t\t\t<v-icon>{{ requestIcon }}</v-icon>\n\t\t\t</v-fade-transition>\n\t\t\t</v-btn>\n\t\t\t<v-btn icon @click=\"reverse\">\n\t\t\t\t<v-icon>swap_horiz</v-icon>\n\t\t\t</v-btn>\n\t</v-toolbar>\n\t    <v-timeline align-top dense class=\"timeline_wrap\" >\n\t    \t<v-timeline-item fill-dot small v-for=\"(stop, index) in $route.params.stops\" :key=\"index\">\n\t    <v-layout pt-3>\n          <v-flex xs3 >\n          \t<v-fade-transition>\n            <v-tooltip bottom v-if=\"\">\n              <v-badge small right slot=\"activator\" v-if=\"busList.length && iconShowJudge(stop.Name, 'in')\">\n                <span slot=\"badge\">{{ getBusQuantify(stop.Name, true) }}</span>\n                <v-icon>directions_bus</v-icon>\n              </v-badge>\n            </v-tooltip>\n            </v-fade-transition>\n          </v-flex>\n          <v-fade-transition>\n          <v-flex class=\"driveout_icon_wrapper\" >\n            <v-badge small right v-if=\"busList.length && iconShowJudge(stop.Name, 'out')\">\n              <span slot=\"badge\">{{ getBusQuantify(stop.Name, false) }}</span>\n              <v-icon>directions_bus</v-icon>\n            </v-badge>\n          </v-flex>\n        </v-fade-transition>\n          <v-flex>\n            <strong>{{ stop.Name }}</strong>\n          </v-flex>\n        </v-layout>\n\t    </v-timeline-item>\n\t</v-timeline>\n\t<v-snackbar  color=\"error\" :timeout=\"timeout\" v-model=\"error_snackbar\">\n\t\t{{ errorMsg }}\n\t\t<v-btn\n        dark\n        flat\n        @click=\"error_snackbar = false\"\n      >\n        Close\n      </v-btn>\n\t</v-snackbar>\n</v-app>\n</v-fade-transition>\n</template>\n<script>\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex'\nimport {requestRealTimeData} from '@/script/request'\nimport { filterObj } from '@/script/utils'\nexport default {\n\tdata: () => ({\n\t\terror_snackbar: false,\n\t\ttimeout: 3000,\n\t\tloading: false,\n\t\trequestIcon: 'none',\n\t\terrorMsg: \"\",\n\t\tintervalId: \"\",\n\t\tbusList: []\n\t}),\n\tcomputed: {\n\t\t...mapState([\"routers\"]),\n\t},\n\twatch: {\n\t\tloading(val) {\n\t\t\tif(!val) {\n\t\t\t\tthis.requestIcon = 'done'\n\t\t\t\tsetTimeout(() => (this.requestIcon = 'none'), 1000)\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n    ...mapActions([\"viewReturn\", \"viewConversion\"]),\n    ...mapMutations([\"updateRealTimeData\", \"reverseRouter\"]),\n   \tshowError(e) {\n   \t\tthis.errorMsg = e\n   \t\tthis.error_snackbar = true\n   \t},\n   \tupdate(params) {\n   \t\tthis.loading = true\n   \t\trequestRealTimeData(params)\n   \t\t.then(result => {\n   \t\t\tthis.loading = false\n   \t\t\tthis.busList = result.data\n   \t\t})\n   \t\t.catch(e => (this.showError(e.status)))\n   \t},\n   \ticonShowJudge(name, genre) {\n   \t\tlet result = this.busList.find(info => (info['name'] === name))\n   \t\tif(result != null) {\n   \t\t\treturn genre === (result[\"busState\"] ? 'in' : 'out')\n   \t\t}\n   \t\treturn false\n\t},\n\tgetBusQuantify(name, logic) {\n\t\tlet result = filterObj('busState', logic, (filterObj('name', name, this.busList)))\n\t\treturn result.length\n\t},\n\treverse() {\n\t\tthis.reverseRouter(this.$route.params.Id)\n\t\tthis.viewConversion({\n\t\t\tname: 'details',\n\t\t\tparams: this.routers.flat().find(r => r[\"Name\"] === this.$route.params[\"Name\"] && r['Id'] !== this.$route.params[\"Id\"])\n\t\t})\n\t},\n\tclear() {\n\t\tclearInterval(this.intervalId)\n\t},\n\tstartInterval() {\n\t\tthis.intervalId = setInterval((self) => {\n\t\t\tif(self.$route.params.hasOwnProperty(\"Id\"))self.update(self.$route.params);\n\t\t}, 4000, this)\n\t}\n\t},\n\tmounted() {\n\t\tthis.update(this.$route.params)\n\t\tif(!this.intervalId)this.startInterval();\n\t},\n\tbeforeRouteUpdate (to, from, next) {\n\t\tthis.busList = []\n\t\tthis.update(to.params)\n\t\tnext()\n  },\n  \tbeforeRouteLeave (to, from, next) {\n  \t\tthis.busList = []\n  \t\tnext()\n  \t}\n}\n</script>\n<style scoped>\n.toolbar_titl {\n  flex-direction: column;\n  justify-content: center;\n}\n.timeline_wrap {\n\tmargin-top: 55px;\n}\n.toolbar_titl > span {\n  size: 1.5rem;\n}\n.driveout_icon_wrapper {\n  position: absolute;\n  top: 45px;\n}\n\n</style>"]}]}