{"remainingRequest":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/crax/Code/ZhuHaiBus-PWA/src/page/details/index.vue","mtime":1550377683592},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/babel-loader/lib/index.js","mtime":1550211689805},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vuetify-loader/lib/loader.js","mtime":1550211707105},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/cache-loader/dist/cjs.js","mtime":1550211689884},{"path":"/home/crax/Code/ZhuHaiBus-PWA/node_modules/vue-loader/lib/index.js","mtime":1550211706840}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapGetters, mapMutations, mapState } from \"vuex\";\nimport { requestRealTimeData } from \"@/script/request\";\nimport { filterObj } from \"@/script/utils\";\nexport default {\n  data: () => ({\n    error_snackbar: false,\n    timeout: 3000,\n    loading: false,\n    requestIcon: \"none\",\n    errorMsg: \"Timeout Retry\",\n    intervalId: \"\",\n    busList: []\n  }),\n  computed: {\n    ...mapState([\"routers\"])\n  },\n  watch: {\n    loading(val) {\n      if (!val) {\n        this.requestIcon = \"done\";\n        setTimeout(() => (this.requestIcon = \"none\"), 1000);\n      }\n    }\n  },\n  methods: {\n    ...mapActions([\"viewReturn\", \"viewConversion\"]),\n    ...mapMutations([\"updateRealTimeData\", \"reverseRouter\"]),\n    showError(e) {\n      this.errorMsg = e;\n      this.error_snackbar = true;\n    },\n    update(params) {\n      this.loading = true;\n      requestRealTimeData(params)\n        .then(result => {\n          this.loading = false;\n          this.busList = result.data;\n        })\n        .catch(e => this.showError(e.status));\n    },\n    iconShowJudge(name, genre) {\n      let result = this.busList.find(info => info[\"name\"] === name);\n      if (result != null) {\n        return genre === (result[\"busState\"] ? \"in\" : \"out\");\n      }\n      return false;\n    },\n    getBusQuantify(name, logic) {\n      let result = filterObj(\n        \"busState\",\n        logic,\n        filterObj(\"name\", name, this.busList)\n      );\n      return result.length;\n    },\n    reverse() {\n      this.reverseRouter(this.$route.params.Id);\n      this.viewConversion({\n        name: \"details\",\n        params: this.routers\n          .flat()\n          .find(\n            r =>\n              r[\"Name\"] === this.$route.params[\"Name\"] &&\n              r[\"Id\"] !== this.$route.params[\"Id\"]\n          )\n      });\n    },\n    clear() {\n      clearInterval(this.intervalId);\n    },\n    startInterval() {\n      this.intervalId = setInterval(\n        self => {\n          if (self.$route.params.hasOwnProperty(\"Id\"))\n            self.update(self.$route.params);\n        },\n        4000,\n        this\n      );\n    }\n  },\n  mounted() {\n    this.update(this.$route.params);\n    if (!this.intervalId) this.startInterval();\n  },\n  beforeRouteUpdate(to, from, next) {\n    this.busList = [];\n    this.update(to.params);\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    this.busList = [];\n    next();\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/page/details","sourcesContent":["<template>\n  <v-fade-transition>\n    <v-app>\n      <v-toolbar fixed>\n        <v-toolbar-side-icon @click=\"viewReturn\">\n          <v-icon>arrow_back</v-icon>\n        </v-toolbar-side-icon>\n        <div>\n          <div class=\"body-2\">{{ $route.params.Name }}({{ busList.length }}辆车正在行驶)</div>\n          <span class=\"body-1\">{{ $route.params.FromStation }}</span>\n          <v-icon small class=\"arrow_forward_icon\">arrow_forward</v-icon>\n          <span class=\"body-1\">{{ $route.params.ToStation }}</span>\n        </div>\n        <v-spacer></v-spacer>\n        <v-btn icon :loading=\"loading\">\n          <v-fade-transition>\n            <v-icon>{{ requestIcon }}</v-icon>\n          </v-fade-transition>\n        </v-btn>\n        <v-btn icon @click=\"reverse\">\n          <v-icon>swap_horiz</v-icon>\n        </v-btn>\n      </v-toolbar>\n      <v-timeline align-top dense class=\"timeline_wrap\">\n        <v-timeline-item fill-dot small v-for=\"(stop, index) in $route.params.stops\" :key=\"index\">\n          <v-layout pt-3>\n            <v-flex xs3>\n              <v-fade-transition>\n                <v-tooltip bottom>\n                  <v-badge\n                    small\n                    right\n                    slot=\"activator\"\n                    v-if=\"busList.length && iconShowJudge(stop.Name, 'in')\"\n                  >\n                    <span slot=\"badge\">{{ getBusQuantify(stop.Name, true) }}</span>\n                    <v-icon>directions_bus</v-icon>\n                  </v-badge>\n                </v-tooltip>\n              </v-fade-transition>\n            </v-flex>\n            <v-fade-transition>\n              <v-flex class=\"driveout_icon_wrapper\">\n                <v-badge small right v-if=\"busList.length && iconShowJudge(stop.Name, 'out')\">\n                  <span slot=\"badge\">{{ getBusQuantify(stop.Name, false) }}</span>\n                  <v-icon>directions_bus</v-icon>\n                </v-badge>\n              </v-flex>\n            </v-fade-transition>\n            <v-flex>\n              <strong>{{ stop.Name }}</strong>\n            </v-flex>\n          </v-layout>\n        </v-timeline-item>\n      </v-timeline>\n      <v-snackbar color=\"error\" :timeout=\"timeout\" v-model=\"error_snackbar\">\n        {{ errorMsg }}\n        <v-btn dark flat @click=\"error_snackbar = false\">Close</v-btn>\n      </v-snackbar>\n    </v-app>\n  </v-fade-transition>\n</template>\n<script>\nimport { mapActions, mapGetters, mapMutations, mapState } from \"vuex\";\nimport { requestRealTimeData } from \"@/script/request\";\nimport { filterObj } from \"@/script/utils\";\nexport default {\n  data: () => ({\n    error_snackbar: false,\n    timeout: 3000,\n    loading: false,\n    requestIcon: \"none\",\n    errorMsg: \"Timeout Retry\",\n    intervalId: \"\",\n    busList: []\n  }),\n  computed: {\n    ...mapState([\"routers\"])\n  },\n  watch: {\n    loading(val) {\n      if (!val) {\n        this.requestIcon = \"done\";\n        setTimeout(() => (this.requestIcon = \"none\"), 1000);\n      }\n    }\n  },\n  methods: {\n    ...mapActions([\"viewReturn\", \"viewConversion\"]),\n    ...mapMutations([\"updateRealTimeData\", \"reverseRouter\"]),\n    showError(e) {\n      this.errorMsg = e;\n      this.error_snackbar = true;\n    },\n    update(params) {\n      this.loading = true;\n      requestRealTimeData(params)\n        .then(result => {\n          this.loading = false;\n          this.busList = result.data;\n        })\n        .catch(e => this.showError(e.status));\n    },\n    iconShowJudge(name, genre) {\n      let result = this.busList.find(info => info[\"name\"] === name);\n      if (result != null) {\n        return genre === (result[\"busState\"] ? \"in\" : \"out\");\n      }\n      return false;\n    },\n    getBusQuantify(name, logic) {\n      let result = filterObj(\n        \"busState\",\n        logic,\n        filterObj(\"name\", name, this.busList)\n      );\n      return result.length;\n    },\n    reverse() {\n      this.reverseRouter(this.$route.params.Id);\n      this.viewConversion({\n        name: \"details\",\n        params: this.routers\n          .flat()\n          .find(\n            r =>\n              r[\"Name\"] === this.$route.params[\"Name\"] &&\n              r[\"Id\"] !== this.$route.params[\"Id\"]\n          )\n      });\n    },\n    clear() {\n      clearInterval(this.intervalId);\n    },\n    startInterval() {\n      this.intervalId = setInterval(\n        self => {\n          if (self.$route.params.hasOwnProperty(\"Id\"))\n            self.update(self.$route.params);\n        },\n        4000,\n        this\n      );\n    }\n  },\n  mounted() {\n    this.update(this.$route.params);\n    if (!this.intervalId) this.startInterval();\n  },\n  beforeRouteUpdate(to, from, next) {\n    this.busList = [];\n    this.update(to.params);\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    this.busList = [];\n    next();\n  }\n};\n</script>\n<style scoped>\n.toolbar_titl {\n  flex-direction: column;\n  justify-content: center;\n}\n.timeline_wrap {\n  margin-top: 55px;\n}\n.toolbar_titl > span {\n  size: 1.5rem;\n}\n.driveout_icon_wrapper {\n  position: absolute;\n  top: 45px;\n}\n</style>"]}]}