{"remainingRequest":"/home/crax/Code/zhuhaibus/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/crax/Code/zhuhaibus/src/components/Search.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/crax/Code/zhuhaibus/src/components/Search.vue","mtime":1546605877733},{"path":"/home/crax/Code/zhuhaibus/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/crax/Code/zhuhaibus/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/home/crax/Code/zhuhaibus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/crax/Code/zhuhaibus/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { error } from 'util';\nimport { setTimeout } from 'timers';\nimport promplist from '../assets/json/promplist';\n\nexport default {\n  data() {\n    return {\n      candidateArray: [],\n      inputString: '',\n      lineNumArray: null,\n      select: null,\n      state: false,\n    };\n  },\n  watch: {\n    inputString(val) {\n      this.candidateArray = [];\n      val && val !== this.select && val.length <= 5 && this.queryData(val);\n    },\n  },\n  methods: {\n    getSearchTopping() {\n      return this.searchTopping;\n    },\n    fuzzyQuery(str, lineArray) {\n      return lineArray\n        .filter(v => v.indexOf(str.toUpperCase()) != -1)\n        .sort((a, b) => {\n          a = a.length;\n          b = b.length;\n          if (a > b) {\n            return 1;\n          }\n          if (a < b) {\n            return -1;\n          }\n          return 0;\n        })\n        .slice(0, 2);\n    },\n    queryData(str) {\n      this.candidateArray = this.fuzzyQuery(str, this.lineNumArray).map(\n        value => promplist[value],\n      );\n    },\n    changeState() {\n      if (!this.candidateArray.length) {\n        this.state = !this.state;\n        this.$emit('PostSearchState', this.state);\n      }\n    },\n    postLineMsg(info) {\n      this.$emit('postLineMsg', info);\n      setTimeout(\n        (self) => {\n          self.inputString = '';\n        },\n        500,\n        this,\n      );\n    },\n  },\n  mounted() {\n    this.lineNumArray = Object.keys(promplist);\n  },\n};\n",{"version":3,"sources":["Search.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Search.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout column>\n    <v-slide-y-transition>\n      <v-text-field\n        hide-details\n        label=\"请输入线路号码\"\n        class=\"search\"\n        background-color=\"#F1F3F4\"\n        solo\n        v-model=\"inputString\"\n        @focus=\"changeState\"\n        @blur=\"changeState\"\n      ></v-text-field>\n    </v-slide-y-transition>\n    <v-list class=\"search_prompt_box\" v-show=\"inputString\" two-line>\n      <div v-for=\"(items,index) of candidateArray\" :key=\"index\">\n        <template v-for=\"item of items\">\n          <v-list-tile :key=\"item.id\" ripple @click=\"postLineMsg(item)\">\n            <v-list-tile-content>\n              <v-list-tile-title>{{item.lineNumber}}</v-list-tile-title>\n              <v-list-tile-sub-title class=\"candidate_list_item_subtitle_wrap\">\n                <span>{{item.originStation}}</span>\n                <v-icon small>arrow_forward</v-icon>\n                <span>{{item.terminal}}</span>\n              </v-list-tile-sub-title>\n            </v-list-tile-content>\n          </v-list-tile>\n        </template>\n      </div>\n    </v-list>\n  </v-layout>\n</template>\n<script>\nimport { error } from 'util';\nimport { setTimeout } from 'timers';\nimport promplist from '../assets/json/promplist';\n\nexport default {\n  data() {\n    return {\n      candidateArray: [],\n      inputString: '',\n      lineNumArray: null,\n      select: null,\n      state: false,\n    };\n  },\n  watch: {\n    inputString(val) {\n      this.candidateArray = [];\n      val && val !== this.select && val.length <= 5 && this.queryData(val);\n    },\n  },\n  methods: {\n    getSearchTopping() {\n      return this.searchTopping;\n    },\n    fuzzyQuery(str, lineArray) {\n      return lineArray\n        .filter(v => v.indexOf(str.toUpperCase()) != -1)\n        .sort((a, b) => {\n          a = a.length;\n          b = b.length;\n          if (a > b) {\n            return 1;\n          }\n          if (a < b) {\n            return -1;\n          }\n          return 0;\n        })\n        .slice(0, 2);\n    },\n    queryData(str) {\n      this.candidateArray = this.fuzzyQuery(str, this.lineNumArray).map(\n        value => promplist[value],\n      );\n    },\n    changeState() {\n      if (!this.candidateArray.length) {\n        this.state = !this.state;\n        this.$emit('PostSearchState', this.state);\n      }\n    },\n    postLineMsg(info) {\n      this.$emit('postLineMsg', info);\n      setTimeout(\n        (self) => {\n          self.inputString = '';\n        },\n        500,\n        this,\n      );\n    },\n  },\n  mounted() {\n    this.lineNumArray = Object.keys(promplist);\n  },\n};\n</script>\n\n<style lang=\"css\" scoped>\n.candidate_list_item_subtitle_wrap {\n  display: flex;\n  align-items: center;\n}\n\n.search_prompt_box {\n  position: absolute;\n  width: 100%;\n  top: 100px;\n  z-index: 999;\n}\n</style>\n"]}]}